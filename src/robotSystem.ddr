RobotSystem robotSystem
                        
Event cmd 			 : cmd(X)  //per lo start e per lo stop da console
Event reachedsensor  : reachedsensor(X) 
Event obstacle 		 : obstacle(X) //emesso dal java 

Event alarm          : alarm(X)
Event sonar 		 : p(Distance, Angle) 

Dispatch photograph  : ph(X)

Context  ctxRadar      ip [ host="172.20.10.2" port=8033 ] -httpserver
EventHandler evhr for sonar ;
Context  ctxSensorEmitter  ip [ host="172.20.10.3" port=8133 ] //Primo sonar del muro
//Context  ctxSensorEmitter  ip [ host="172.20.10.4" port=8133 ] //Secondo sonar del muro

Context ctxRobot ip [ host="172.20.10.14"  port=8079 ]
EventHandler evh for alarm, cmd ;

QActor radargui context ctxRadar {
	  
	Plan init normal  
		actions[
			println("RADAR init the GUI ... ") ;	
			actorOp activateGui
		]        
		switchTo doWorkMsgs     
	
	Plan doWorkMsgs 
		actions[
			println("doWorkMsgs")
		]
		transition 
		whenTime 86400000 -> doWorkMsgs
		whenEvent sonar -> checkObstacle
		
	Plan checkObstacle
		actions[
			println("checkObstacle") ;
			onEvent sonar : p(D,A) -> actorOp sendDataToGui(D,A) ;
			onEvent sonar : p(D,A) -> actorOp checkSonars(D,A) ;
			onEvent cmd	  : cmd(start) -> actorOp reset 	 
		]  
		switchTo doWorkMsgs
	
}

QActor alarmhandler context ctxRadar {
	
	Plan init normal
		actions[
			println("init alarmhandler")
		]   
		transition
		whenTime 86400000 -> init
		whenEvent alarm -> handleAlarm
		
	Plan handleAlarm resumeLastPlan
		actions[
			println("alarm") ;
			sound time(7000) file('./audio/alarm_sound.wav')	
		]
		transition
		whenTime 86400000 -> handleAlarm
		whenEvent cmd -> init
}

QActor photoreceiver context ctxRadar {
	
	Plan init normal
		actions[
			actorOp connectAndSubscribe
		] 
		switchTo doWork
		
	Plan doWork
		actions[
			println("doWork")
		]
		transition 
		whenTime 86400000 -> doWork
		whenMsg photograph -> savePhoto  
        
	Plan savePhoto
		actions[
			onMsg photograph : ph(X) -> actorOp saveMqttPhoto(X) ; 
        	println("Foto Ricevuta")  
		]
		switchTo doWork
}

QActor sensorsonar context ctxSensorEmitter {
	  
	Rules {
		mysonar( s1, coloryellow, "172.20.10.3" ).
		//mysonar( s2, colorred, "172.20.10.4" ).      
 	
		sonar(s1,330).
		sonar(s2,30).
    	setmyposition :- mysonar( SONAR, _, _ ), sonar( SONAR,POS ), assert( position( POS ) ).   
	}

	Plan init normal
		actions[
			println("sensorsonar STARTS")  ;
			actorOp startSonarC ;
    		demo setmyposition ;
    		[ !? position(POS) ] println( position(POS) )
		]
		switchTo workReal
    	 
	Plan workReal 
		actions[
			[ !? position(POS) ] actorOp getDistanceFromSonar(POS) ;
			[ ?? obstacledata( D,POS )] emit sonar : p(D,POS)
		]
		switchTo workReal
}

QActor robotsonar context ctxRobot {

	Plan init normal
		actions[
			println("robotsonar STARTS") ;
    		actorOp startSonarC
    	]
		switchTo workReal
    	 
	Plan workReal 
		actions[
			actorOp getDistanceFromSonar
		]
		switchTo workReal
}

Robot ioRobot QActor robot_actor context ctxRobot {
            
	Rules {           
		tforward(5000).
		tturnright(550).
	    tturnleft(300).
	 }
	  
	 Plan init normal 
		actions [
	    	actorOp connectToSend;
	      	actorOp createPi4jLed(23) ;
	      	actorOp createPiCamera ;
	      	println("-------------");
	      	println("ioRobot: A robot performs a move in reactive way"  );
	      	println("-------------")
	    ]
	    switchTo startWalking
	    
	Plan startWalking
		actions [
	    	println("startWalking")
		]
	    reactive [!? tforward(T)] robotForward speed(40) time(T)
	    whenEnd          	  		  -> startWalking
	    whenTout 6000        	  	  -> handleTout
	    whenEvent obstacle    		  -> stopWalking
	    or whenEvent reachedsensor    -> reachedSensor
	    or whenEvent cmd    		  -> stopWalking
	    or whenEvent alarm 			  -> stopWalking
	
	Plan stopWalking
		actions [
	    	println("stopWalking");
	    	robotStop speed(1) time(1)
	    ]
	    transition
	    whenTime 86400000 -> stopWalking
	    whenEvent cmd -> startWalking // per l'evento start ricevuto da console
	
	Plan reachedSensor
		actions [
	    	println("reachedSensor");
	      	robotStop speed(1) time(1);
	      	[!? tturnleft(T)] robotLeft speed(40) time (T); //girare a sinistra di 90°
	      	delay time(2000);
	      	actorOp startBlink;
	      	actorOp sendMsgMqtt ;
	      	delay time(2000);
	      	[!? tturnright(T)] robotRight speed(40) time (T); //girare a destra di 90°
	      	delay time(2000);
	      	actorOp stopBlink
	    ] 
	    switchTo startWalking
	    
    Plan handleTout
    	actions [
    		robotStop speed(1) time(1)
    	]
}    