/* Generated by AN DISI Unibo */
package it.unibo.robot_actor;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.xml.bind.DatatypeConverter;

import org.eclipse.paho.client.mqttv3.MqttException;

import com.hopding.jrpicam.RPiCamera;
import com.hopding.jrpicam.enums.Exposure;
import com.hopding.jrpicam.exceptions.FailedToRunRaspistillException;

import it.unibo.bls.highLevel.interfaces.IDevLed.LedColor;
import it.unibo.bls.raspberry.components.DeviceLedPi4j;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.mqtt.MqttUtils;

public class Robot_actor extends AbstractRobot_actor {
	protected DeviceLedPi4j ledpi4j;
	private MqttUtils mqtt = MqttUtils.getMqttSupport(this);
	private BlinkAsynch blink;
	protected RPiCamera piCamera;
	private int counter = 1;

	public Robot_actor(String actorId, QActorContext myCtx, IOutputEnvView outEnvView) throws Exception {
		super(actorId, myCtx, outEnvView, it.unibo.qactors.QActorUtils.robotBase);
	}

	public void createPi4jLed(int pinNum) {
		try {
			println("Led createPi4jLed STARTS " + pinNum);
			this.ledpi4j = new DeviceLedPi4j("led0", outEnvView, LedColor.RED, pinNum);
			this.blink = new BlinkAsynch("blinker", outEnvView, ledpi4j);

		} catch (Exception e) {
			println("ERROR " + e.getMessage());
		}
	}

	public void startBlink() {
		this.blink.activate();
	}

	public void stopBlink() {
		this.blink.suspendWork();
	}

	public void createPiCamera() {
		try {
			println("createPiCamera START");
			this.piCamera = new RPiCamera("");
			this.piCamera.setWidth(500).setHeight(500) // Set Camera width and
														// height
					.setExposure(Exposure.AUTO) // Set Camera's exposure.
					.setTimeout(2) // Set Camera's timeout.
					.setAddRawBayer(true) // Add Raw Bayer data to image files
					.setHorizontalFlipOn() // Flip orizzontale automatico
					.setRotation(180); // Rotazione immagine automatica

			println("createPiCamera END");

		} catch (FailedToRunRaspistillException e) {
			println("ERROR " + e.getMessage());
		}
	}

	private BufferedImage takePhoto() {
		BufferedImage image = null;
		try {
			println("ACQUISIZIONE FOTO IN CORSO...");
			image = this.piCamera.takeBufferedStill(); 
			println("FOTO ACQUISITA");
		} catch (IOException | InterruptedException e) {
			println("ERROR " + e.getMessage());
		}
		return image;
	}

	public void connectToSend() throws MqttException {
		String clientId = "robotbagnoli";
		String brokerAddr = "tcp://broker.hivemq.com:1883";
		String topic = "unibo/mqtt/robotbagnoli";
		this.mqtt.connect(this, clientId, brokerAddr, topic);
	}

	public void sendMsgMqtt() {
		String clientId = "robotbagnoli";
		String brokerAddr = "tcp://broker.hivemq.com:1883";
		String topic = "unibo/mqtt/robotbagnoli";
		BufferedImage bi = this.takePhoto();
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		try {
			ImageIO.write(bi, "jpg", os);
			String messageBase64 = DatatypeConverter.printBase64Binary(os.toByteArray());
			os.close();
			String messageToSend = "msg( photograph, dispatch, " +  this.getName() + ", " + this.getName().replace("_ctrl", "") + ", " + "ph(\"" + messageBase64 + "\")" + ", " + this.counter++ + ")";
			this.mqtt.publish(this, clientId, brokerAddr, topic, messageToSend, 1, false);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
